# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Serre3fem', [dirname(__file__)])
        except ImportError:
            import _Serre3fem
            return _Serre3fem
        if fp is not None:
            try:
                _mod = imp.load_module('_Serre3fem', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Serre3fem = swig_import_helper()
    del swig_import_helper
else:
    import _Serre3fem
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def conc(a, b, c, n, m, k, d):
    return _Serre3fem.conc(a, b, c, n, m, k, d)
conc = _Serre3fem.conc

def mallocPy(n):
    return _Serre3fem.mallocPy(n)
mallocPy = _Serre3fem.mallocPy

def writetomem(x, i, f):
    return _Serre3fem.writetomem(x, i, f)
writetomem = _Serre3fem.writetomem

def readfrommem(x, i):
    return _Serre3fem.readfrommem(x, i)
readfrommem = _Serre3fem.readfrommem

def deallocPy(x):
    return _Serre3fem.deallocPy(x)
deallocPy = _Serre3fem.deallocPy

def TDMA(a, b, c, d, n, x):
    return _Serre3fem.TDMA(a, b, c, d, n, x)
TDMA = _Serre3fem.TDMA

def PENT(e, a, d, c, f, B, n, x):
    return _Serre3fem.PENT(e, a, d, c, f, B, n, x)
PENT = _Serre3fem.PENT

def midpt2ca(qm, dx, n, qa):
    return _Serre3fem.midpt2ca(qm, dx, n, qa)
midpt2ca = _Serre3fem.midpt2ca

def ca2midpt(qa, dx, n, qm):
    return _Serre3fem.ca2midpt(qa, dx, n, qm)
ca2midpt = _Serre3fem.ca2midpt

def ufromGh(G, h, hbeg, hend, ubeg, uend, dx, n, nBC, u):
    return _Serre3fem.ufromGh(G, h, hbeg, hend, ubeg, uend, dx, n, nBC, u)
ufromGh = _Serre3fem.ufromGh

def Gfromuh(u, h, hbeg, hend, ubeg, uend, dx, n, nBC, G):
    return _Serre3fem.Gfromuh(u, h, hbeg, hend, ubeg, uend, dx, n, nBC, G)
Gfromuh = _Serre3fem.Gfromuh

def phikm(r):
    return _Serre3fem.phikm(r)
phikm = _Serre3fem.phikm

def phikp(r):
    return _Serre3fem.phikp(r)
phikp = _Serre3fem.phikp

def weightsum(a, x, b, y, n, z):
    return _Serre3fem.weightsum(a, x, b, y, n, z)
weightsum = _Serre3fem.weightsum

def evolve(G, h, u, g, dx, dt, n, nBC, nh, nG):
    return _Serre3fem.evolve(G, h, u, g, dx, dt, n, nBC, nh, nG)
evolve = _Serre3fem.evolve

def evolvewrap(Ga, ha, Gabeg, Gaend, habeg, haend, hmbeg, hmend, uabeg, uaend, umbeg, umend, nfcBC, nGsBC, g, dx, dt, n, nBCa, nBCm):
    return _Serre3fem.evolvewrap(Ga, ha, Gabeg, Gaend, habeg, haend, hmbeg, hmend, uabeg, uaend, umbeg, umend, nfcBC, nGsBC, g, dx, dt, n, nBCa, nBCm)
evolvewrap = _Serre3fem.evolvewrap
# This file is compatible with both classic and new-style classes.


